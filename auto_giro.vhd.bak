-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- Generated by Quartus II Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition
-- Created on Thu Nov 07 18:54:13 2024

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY auto_giro IS
    PORT (
        reset : IN STD_LOGIC := '0';
        clock : IN STD_LOGIC;
        Izquierda : IN STD_LOGIC := '0';
        Derecha : IN STD_LOGIC := '0';
        MI1 : OUT STD_LOGIC;
        MI2 : OUT STD_LOGIC;
        MD1 : OUT STD_LOGIC;
        MD2 : OUT STD_LOGIC
    );
END auto_giro;

ARCHITECTURE BEHAVIOR OF auto_giro IS
    TYPE type_fstate IS (stop,derecha90,izquierda90,grio180);
    SIGNAL fstate : type_fstate;
    SIGNAL reg_fstate : type_fstate;
    SIGNAL reg_MI1 : STD_LOGIC := '0';
    SIGNAL reg_MI2 : STD_LOGIC := '0';
    SIGNAL reg_MD1 : STD_LOGIC := '0';
    SIGNAL reg_MD2 : STD_LOGIC := '0';
BEGIN
    PROCESS (clock,reg_fstate)
    BEGIN
        IF (clock='1' AND clock'event) THEN
            fstate <= reg_fstate;
        END IF;
    END PROCESS;

    PROCESS (fstate,reset,Izquierda,Derecha,reg_MI1,reg_MI2,reg_MD1,reg_MD2)
    BEGIN
        IF (reset='1') THEN
            reg_fstate <= stop;
            reg_MI1 <= '0';
            reg_MI2 <= '0';
            reg_MD1 <= '0';
            reg_MD2 <= '0';
            MI1 <= '0';
            MI2 <= '0';
            MD1 <= '0';
            MD2 <= '0';
        ELSE
            reg_MI1 <= '0';
            reg_MI2 <= '0';
            reg_MD1 <= '0';
            reg_MD2 <= '0';
            MI1 <= '0';
            MI2 <= '0';
            MD1 <= '0';
            MD2 <= '0';
            CASE fstate IS
                WHEN stop =>
                    IF (((Izquierda = '0') AND (Derecha = '1'))) THEN
                        reg_fstate <= derecha90;
                    ELSIF (((Izquierda = '1') AND (Derecha = '0'))) THEN
                        reg_fstate <= izquierda90;
                    ELSIF (((Izquierda = '0') AND (Derecha = '0'))) THEN
                        reg_fstate <= stop;
                    ELSIF (((Izquierda = '1') AND (Derecha = '1'))) THEN
                        reg_fstate <= grio180;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= stop;
                    END IF;

                    reg_MI2 <= '0';

                    reg_MI1 <= '0';

                    reg_MD2 <= '0';

                    reg_MD1 <= '0';
                WHEN derecha90 =>
                    IF (((Izquierda = '0') AND (Derecha = '0'))) THEN
                        reg_fstate <= stop;
                    ELSIF (((Izquierda = '1') AND (Derecha = '1'))) THEN
                        reg_fstate <= grio180;
                    ELSIF (((Izquierda = '0') AND (Derecha = '1'))) THEN
                        reg_fstate <= derecha90;
                    ELSIF (((Izquierda = '1') AND (Derecha = '0'))) THEN
                        reg_fstate <= izquierda90;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= derecha90;
                    END IF;

                    reg_MI2 <= '0';

                    reg_MI1 <= '1';

                    reg_MD2 <= '1';

                    reg_MD1 <= '0';
                WHEN izquierda90 =>
                    IF (((Izquierda = '1') AND (Derecha = '1'))) THEN
                        reg_fstate <= grio180;
                    ELSIF (((Izquierda = '0') AND (Derecha = '0'))) THEN
                        reg_fstate <= stop;
                    ELSIF (((Izquierda = '1') AND (Derecha = '0'))) THEN
                        reg_fstate <= izquierda90;
                    ELSIF (((Izquierda = '0') AND (Derecha = '1'))) THEN
                        reg_fstate <= derecha90;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= izquierda90;
                    END IF;

                    reg_MI2 <= '1';

                    reg_MI1 <= '0';

                    reg_MD2 <= '0';

                    reg_MD1 <= '1';
                WHEN grio180 =>
                    IF (((Izquierda = '0') AND (Derecha = '0'))) THEN
                        reg_fstate <= stop;
                    ELSIF (((Izquierda = '0') AND (Derecha = '1'))) THEN
                        reg_fstate <= derecha90;
                    ELSIF (((Izquierda = '1') AND (Derecha = '0'))) THEN
                        reg_fstate <= izquierda90;
                    ELSIF (((Izquierda = '1') AND (Derecha = '1'))) THEN
                        reg_fstate <= grio180;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= grio180;
                    END IF;

                    reg_MI2 <= '0';

                    reg_MI1 <= '1';

                    reg_MD2 <= '1';

                    reg_MD1 <= '0';
                WHEN OTHERS => 
                    reg_MI1 <= 'X';
                    reg_MI2 <= 'X';
                    reg_MD1 <= 'X';
                    reg_MD2 <= 'X';
                    report "Reach undefined state";
            END CASE;
            MI1 <= reg_MI1;
            MI2 <= reg_MI2;
            MD1 <= reg_MD1;
            MD2 <= reg_MD2;
        END IF;
    END PROCESS;
END BEHAVIOR;
